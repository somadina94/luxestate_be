name: Deploy to EC2

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        env:
          TESTING: "true"
          DATABASE_URL: "sqlite:///:memory:"
        run: |
          pytest app/tests/ -v --tb=short

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Navigate to project directory
            cd /home/${{ secrets.EC2_USERNAME }}/luxestate || mkdir -p /home/${{ secrets.EC2_USERNAME }}/luxestate && cd /home/${{ secrets.EC2_USERNAME }}/luxestate

            # Pull latest code from GitHub (same as deploy.sh logic)
            if [ -d .git ]; then
              git fetch --all --prune
              DEFAULT_BRANCH=$(git symbolic-ref refs/remotes/origin/HEAD 2>/dev/null | sed 's@^refs/remotes/origin/@@' || echo "")
              if [ -z "$DEFAULT_BRANCH" ]; then
                DEFAULT_BRANCH=$(git branch -r | grep -E 'origin/(main|master)' | head -1 | sed 's@origin/@@' | xargs)
              fi
              if [ -n "$DEFAULT_BRANCH" ]; then
                git reset --hard "origin/${DEFAULT_BRANCH}"
              else
                git reset --hard origin/HEAD 2>/dev/null || git reset --hard HEAD
              fi
            else
              git clone https://github.com/${{ github.repository }}.git .
            fi

            # Ensure .env file exists
            if [ ! -f .env ]; then
              echo "Warning: .env file not found. Please create it manually."
            fi

            # Ensure deploy.sh is executable and has correct line endings
            chmod +x deploy.sh
            dos2unix deploy.sh 2>/dev/null || true

            # Run deployment script
            echo "Running deployment script..."
            bash ./deploy.sh || {
              echo "❌ Deployment failed. Check logs: sudo journalctl -u luxestate -n 50"
              exit 1
            }

            # Wait a moment for service to start
            sleep 5

            # Check if service is running
            if sudo systemctl is-active --quiet luxestate; then
              echo "✅ Service is running!"
              
              # Test health endpoint
              sleep 3
              if curl -f http://localhost:3002/healthy > /dev/null 2>&1; then
                echo "✅ Health check passed!"
              else
                echo "⚠️ Health check failed. Check logs: sudo journalctl -u luxestate -n 50"
              fi
            else
              echo "❌ Service failed to start. Check logs: sudo journalctl -u luxestate -n 50"
              exit 1
            fi
